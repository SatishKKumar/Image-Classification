# -*- coding: utf-8 -*-
"""image_classification_with_email_alert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQJE3bQhpf1_dEtUJs-K850LlQbxUeuu
"""

import numpy as np
import os
import cv2
import matplotlib.pyplot as plt


##connecting google drive to google colab##
from google.colab import drive
drive.mount('/content/drive')
##DATADIR is images folder which has images of the two classes 'not emp' and 'emp'##
DATADIR = "/content/drive/My Drive/images_classifi/images"
CATEGORIES = ["not emp", "emp"]

##Reading all the images in directory##
##coverting all the images in from the DATADIR folder using gradscaling##
for category in CATEGORIES:
  path = os.path.join(DATADIR, category)
  for img in os.listdir(path):
    print(img)
    img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
    plt.imshow(img_array, cmap ="gray")
    plt.show()
    break
  break

print(img_array.shape)

path

##Reshaping the image##
IMG_SIZE = 80
new_array = cv2.resize(img_array, (IMG_SIZE,IMG_SIZE))
plt.imshow(new_array,cmap="gray")
plt.show()

training_data = []
def create_training_data():
  for category in CATEGORIES:
    path = os.path.join(DATADIR, category)
    class_num = CATEGORIES.index(category)
    for img in os.listdir(path):
      try:
        img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
        new_array = cv2.resize(img_array, (IMG_SIZE,IMG_SIZE))
        training_data.append([new_array, class_num])
      except Exception as e:
        pass

create_training_data()

print(len(training_data))

##using the random shuffle to choose the Reshaped images images##
import random
random.shuffle(training_data)

for sample in training_data:
  print(sample[1])

X = []
y = []

for features, lables in training_data:
  X.append(features)
  y.append(lables)
X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)

X.shape

X[1].shape

np.array(y).shape

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten,Conv2D,MaxPooling2D
X = X/80.0


model = Sequential()

model.add(  Conv2D(64,(3,3),input_shape = X.shape[1:])  )
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())
model.add(Dense(64))

model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss="binary_crossentropy",
              optimizer="adam",
              metrics=['accuracy'])
model.fit(X,y,epochs=10, validation_split=0.3)

###new image###predicting###
img_array_new = cv2.imread('/content/images.jpg', cv2.IMREAD_GRAYSCALE)
print(img_array_new)
IMG_SIZE = 80
new_array_new = cv2.resize(img_array_new, (IMG_SIZE,IMG_SIZE))
plt.imshow(new_array_new, cmap ="gray")
plt.show()

ml = np.array(new_array_new).reshape(-1, IMG_SIZE, IMG_SIZE, 1)

ml.shape

n=model.predict(ml)

print(n)

type(n)

n1=int(n)

ab=[]
if n1==1:
  ab.append("It is empty")

len(ab)

import smtplib, ssl

if len(ab)==1:
  port = 587  # For starttls
  smtp_server = "smtp.gmail.com"
  sender_email = "satish99017@gmail.com"
  receiver_email = "daisyrhea1797@gmail.com"
  password = input("Type your password and press enter:")
  message = """\
Subject: Result

The self is empty."""

  context = ssl.create_default_context()
  with smtplib.SMTP(smtp_server, port) as server:
      server.ehlo()  # Can be omitted
      server.starttls(context=context)
      server.ehlo()  # Can be omitted
      server.login(sender_email, password)
      server.sendmail(sender_email, receiver_email, message)

